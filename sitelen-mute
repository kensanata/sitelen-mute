#!/usr/bin/env perl
# A modern, minimalist javascript photo gallery
# Copyright© 2016-2018  Alex Schroeder <alex@gnu.org>
# Copyright©      2018  Adrian Steinmann <ast@marabu.ch>
# Copyright© 2011-2016  wave++ "Yuri D'Elia" <wavexx@thregr.org>

# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.

# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

# You should have received a copy of the GNU General Public License along with
# this program. If not, see <http://www.gnu.org/licenses/>.

use v5.14;
use strict;
use warnings;

our $VERSION = "2.0.0";

use locale;
use utf8;
use if $^V lt v5.23.4, open => qw{:std :utf8};
use if $^V ge v5.23.4, open => qw{:std :locale};
require Encode;
require encoding;
our $ENCODING = encoding::_get_locale_encoding() || 'UTF-8';
sub decode { return Encode::decode($ENCODING, $_[0]); }
sub encode { return Encode::encode($ENCODING, $_[0]); }

use Getopt::Long qw{:config bundling};

use threads;
use threads::shared;
use Thread::Queue;
use Storable qw{freeze thaw};
use Fcntl;

use FindBin qw{$RealBin};
use File::Basename qw{fileparse};
use File::Find qw{find};
use File::Path qw{make_path remove_tree};
use File::Spec::Functions qw{rel2abs canonpath catfile splitpath};

use Image::ExifTool qw{ImageInfo};
use Time::Piece;

use JSON::PP;
use Digest::SHA;

use Data::Dumper;
$Data::Dumper::Indent = 1;

# our name ;-)
my $me = (splitpath($0))[2];
# view subdirectory where the JavaScript and CSS code lives
my $viewdir = catfile($RealBin, 'view');
umask oct('0022');

# defaults
my $facedetect_url = 'http://www.thregr.org/~wavexx/hacks/facedetect/';
my $filemode = oct('0644');
my $slim = 0;
my $include = 0;
my $orient = 1;
my $timesort = 1;
my $revsort = 0;
my %filetypes = map { $_ => 1 } qw{JPEG PNG TIFF};
my %extensions = map { $_ => 1 } qw{jpg jpeg png tif tiff};
my $ext = "jpg";
my @minthumb = (150, 112);
my @maxthumb = (267, 200);
my @maxfull = (1600, 1200);
my $imgq = 90;
my $fullpano = 1;
my $nodown = 0;
my $panort = 2.;
my $facedet = 0;
my $use_orig = 0;
my $jpegoptim = 1;
my $pngoptim = 1;
my $p7zip = 1;
my $verbose = 0;
my $workers = 0;
my $sRGB = 1;
my $do_blur = 1;
my $indexUrl = undef;
my %captions = map { $_ => 1} qw{txt xmp exif cmt};
my @captions = keys %captions;
my $galleryTitle = '';
my $galleryDescription = '';
my $galleryUrl = '';
my $updating = 0;
my %copy_method = (
  copy => '',
  hard => '--link',
  sym  => '--symbolic-link',
);
$copy_method{ref} = '--reflink' unless $^O =~ m{bsd$}oi;
my $copy_method = 'copy';
my $fdownload = catfile(qw{files album.zip});
my $alg = 'sha256';
my $sha = Digest::SHA->new($alg);
my $odata = { data => [] };
my $ofiles;
my @deleted;
my $dir;
my $absDir;
my $out;
my $absOut;
my $name;
my $aprops;
my $adata;
my $zipfile;

# support functions
sub fatal
{
  die map { "$_\n" } 'Fatal error:', @_;
}

# check if our environment has a given command installed
sub cmd_exists
{
  my ($c) = @_;
  return qx{/bin/sh -c "command -v $c"};
}

sub sys
{
  my @cmd = @_;
  my $cmd = join ' ', map { qq{"$_"} } @cmd;
  warn "+ $cmd\n" if $verbose > 1;
  my $fd;
  open($fd, '-|', @cmd) || fatal "cannot execute $cmd: $!";
  local $/ = undef;
  my $o = <$fd>;
  close($fd) || fatal "close failed on $cmd: $!";
  return split(m{\n+}o, $o);
}

sub do_copy
# OS-specific handling of cp and ln commands
{
  die "USAGE: do_copy TYPE ARGS" unless @_ > 2;
  my ($t, @args) = @_;
  fatal "Unknown copy method '$t'" unless exists $copy_method{$t};
  my @cmd = ('cp');
  if ($^O =~ m{bsd$}oi) {
    if ($t eq 'hard') {
      @cmd = ('ln');
    } elsif ($t eq 'sym') {
      @cmd = ('ln', '-s');
    } elsif ($t eq 'copy') {
      @cmd = ('cp');
    } else {
      fatal "do_copy: cp option '$t' not supported";
    }
  } else {
    push @cmd, $copy_method{$t} if $copy_method{$t}; # don't push ''
  }
  sys(@cmd, @args);
};

sub copy_source_file
{
  my ($file, $fout) = @_;
  # symlinks need the right dest path so just give them an abs path
  $file = rel2abs($file) if $copy_method eq 'sym';
  do_copy($copy_method, $file, $fout);
}

sub is_a_gallery
{
    my ($d) = @_;
    return unless -e catfile($d, 'view');
    return unless -e catfile($d, 'index.html');
    return unless -e catfile($d, 'data.json');
    return 1;
}

sub slurp
{
  my ($fn) = @_;
  no warnings; # avoid wide character warnings
  open(my $fd, '<', $fn) || fatal "cannot read $fn: $!";
  binmode($fd, ":encoding($ENCODING)") if $^V lt v5.23.4;
  local $/ = undef;
  my $o = <$fd>;
  close $fd;
  return $o // '';
}

sub read_json
{
  my($f) = @_;
  my $j = slurp($f);
  fatal "Failed to read $f" unless $j;
  my $h = decode_json($j);
  fatal "Failed to parse $f"
    unless $h && ref $h eq 'HASH';
  fatal "Failed to parse $f: missing data"
    unless exists $h->{data};
  fatal "Failed to parse $f: data not an array"
    unless ref $h->{data} eq 'ARRAY';
  return $h;
}

sub write_json
{
  my ($f, $jh, $ja) = @_;
  die "USAGE: write_json FILENAME HREF AREF"
    unless (@_ == 3) && (ref $jh eq 'HASH') && (ref $ja eq 'ARRAY');
  my $fd;
  fatal("cannot write file '$f': $!")
    unless(open($fd, ">:raw", $f));
  my $j = {};
  for (qw(thumb blur)) {
    $j->{$_} = $jh->{$_} if exists $jh->{$_};
  }
  if ($timesort) {
  # Sorting: time
        $j->{data} = $revsort ? [ sort { $b->{stamp} <=> $a->{stamp} } @{$jh->{data}}, @$ja ]
                              :
                                [ sort { $a->{stamp} <=> $b->{stamp} } @{$jh->{data}}, @$ja ];
  }
  else {
  # Sorting: image names
       $j->{data} = $revsort ? [ sort { ${$b->{img}}[0] cmp  ${$a->{img}}[0] } @{$jh->{data}}, @$ja ]
                             :
                               [ sort { ${$a->{img}}[0] cmp  ${$b->{img}}[0] } @{$jh->{data}}, @$ja ];
  }

  $j->{version} = $VERSION;
  $j->{timestamp} = time();
  $j->{timecreated} = sprintf "%s", scalar localtime $j->{timestamp};
  $j->{name} = $name if $name;
  $j->{download} = $fdownload if $zipfile && -f $zipfile;
  $j->{index} = $indexUrl if $indexUrl;
  print($fd JSON::PP->new->ascii->pretty->canonical->encode($j));
  if (close($fd)) {
      warn "Wrote new $f\n";
      return $f;
  }
  fatal "Failed to write $f: $!";
}

sub dispatch
{
  my ($fun, @seq) = @_;
  my $workers = $workers || 1;
  my $queue = Thread::Queue->new();
  $queue->enqueue($_) for @seq;
  my @threads;
  for (1 .. $workers) {
    my $thr = threads->create(
      sub { while (defined (my $v = $queue->dequeue_nb()) ) { &$fun($v) } }
    );
    push(@threads, $thr);
  }
  $_->join() for @threads;
}

sub run_in_parallel
{
  my ($fn, $fun, $seq) = @_;
  die "USAGE: run_in_parallel NAME FUNCTION AREF"
    unless @_ == 3 && ref $fun eq 'CODE'
                   && ref $seq eq 'ARRAY'
                   && @$seq > 0;
  my $n = @$seq;
  my @res :shared = (undef) x $n;
  dispatch(
    sub {
      my ($i) = @_;
      my $r = &$fun($seq->[$i]);
      $res[$i] = defined($r) ? freeze($r) : undef;
    },
    0 .. $n-1
  );
  return [ map {
    defined $_ ? thaw $_
               : fatal "Thread failed in function '$fn'; cannot proceed"
  } @res ];
}

sub min
{
  my ($a, $b) = @_;
  return ($a < $b) ? $a : $b;
}

sub max
{
  my ($a, $b) = @_;
  return ($a > $b) ? $a : $b;
}

sub pmin
{
  my ($m, $v) = @_;
  return 0 if $v < 0;
  return min($m, $v);
}

# thread-safe progress bar
{
  package progress;

  my $act :shared;
  my $total :shared;
  my $cnt :shared;
  my $llen :shared;

  sub init
  {
    my ($_act, $_total) = @_;
    $act = $_act;
    $total = $_total;
    $cnt = 0;
    $llen = 0;
    print(pad($act . ' ...') . "\r");
    STDOUT->flush();
  }

  sub pad
  {
    my ($str) = @_;
    my $len = length($str);
    $str .= " " x ($llen - $len) if $len < $llen;
    $llen = $len;
    return $str;
  }

  sub status
  {
    my ($msg) = @_;
    lock($cnt);
    my $pc = ($cnt++ / $total * 100);
    my $str = sprintf("%s %2.0f%% completed", $act, $pc);
    $str .= ": " . $msg if $msg;
    print pad($str) . "\r";
    STDOUT->flush();
  }

  sub done
  {
    print pad(join ' ', $act, '100%', 'completed', @_), "\n";
  }
}

# caption utilities
sub cap_clean
{
  my ($x) = @_;
  return '' unless $x;
  $x =~ s{\s+}{ }go;
  $x =~ s{^\s+|\s+$}{}go;
  return $x;
}

sub cap_from_str
{
  my ($title, $desc) = @_;
  return unless $title;
  ($title, $desc) = split m{\n+}o, $title unless $desc;
  return [cap_clean($title), cap_clean($desc)];
}

sub cap_from_props
{
  my ($props) = @_;
  my $ret = ['', ''];
  if ($props->{Title})
  {
    my $title = Encode::decode_utf8($props->{Title});
    $ret->[0] = cap_clean($title);
  }
  if ($props->{Description}) {
    my $desc = Encode::decode_utf8($props->{Description});
    $ret->[1] = cap_clean($desc);
  }
  return $ret;
}

# option parsing
sub parse_wh
{
  my ($opt, $spec) = @_;
  my ($w, $h) = ($spec =~ m{^(\d+)x(\d+)$}o);
  unless(defined($w) && $w > 0 && defined($h) && $h > 0) {
    fatal "bad WxH specification in option $opt";
  }
  return (int($w), int($h));
}

sub parse_int
{
  my ($opt, $value, $min, $max) = @_;
  if ((defined($min) && $value < $min) || (defined($max) && $value > $max)) {
    fatal "bad value for option $opt";
  }
  return int($value);
}

sub parse_captions
{
  my ($o, $v) = @_;
  return [] if $v eq 'none';
  my @cm = split(m{\s,\s}o, $v);
  for my $m (@cm) {
    fatal "'$m' not a caption method; use one of "
          . join ', ', sort keys %captions
      unless exists $captions{$m};
  }
  return \@cm;
}

sub parse_copy_method
{
  my ($o, $v) = @_;
  $v = $copy_method unless $v;
  fatal "'$v' not a copy method; use one of "
        . join ', ', sort keys %copy_method
    unless exists $copy_method{$v};
  return $v;
}

# given a directory return an aref of files with .$ext in that directory
sub current_imgs
{
  my ($d) = @_;
  fatal "current_imgs: '$d' not a directory" unless -d $d;
  opendir(my $dh, $d) || fatal " Failed to open directory '$d': $!";
  my @i = ();
  while (readdir $dh) {
    push @i, $_ if m{\.$ext$}o;
  }
  closedir $dh;
  warn map { "$_\n" } "Current images in $d:", sort @i if $verbose > 1;
  return \@i;
}

sub print_help
{
  warn qq{Usage: $me [options] INPUT_DIR [OUTPUT_DIR]
  -h, --help            this help
  -v                    verbosity (repeat for more detail)
  -s                    slim output (no original files nor album download)
  -i                    include individual original image files
  -c "METHODS"          caption extraction methods (txt,xmp,exif,cmt,none)
  -o                    do not auto-orient images
  -k                    do not modify files, keep original image files
  -t                    do not time-sort
  -r                    reverse album order
  -u                    add/remove images (OUTPUT_DIR optional when removing)
  -p                    do not automatically include full-sized panoramas
  -n "ALBUM_NAME"       set album name (title in browser window)
  -d                    skip creation of a full album zip file for download
  -f                    improve thumbnail cutting by performing face detection
  -j N                  set process-level parallelism (number of workers)
  --noblur              skip blurry backdrop generation (just dark noise)
  --max-full WxH        maximum full image size ($maxfull[0]x$maxfull[1])
  --max-thumb WxH       maximum thumbnail size ($maxthumb[0]x$maxthumb[1])
  --min-thumb WxH       minimum thumbnail size ($minthumb[0]x$minthumb[1])
  --no-sRGB             do not remap preview/thumbnail color profiles to sRGB
  --quality Q           preview image quality (0-100, currently: $imgq)
  --link-orig           copy method (hard,sym,ref,copy); default: $copy_method
  --viewdir             directory containing $me CSS/JavaScript ($viewdir)
  --index url           URL location for the index/back button
  --version             output current $me version ($VERSION)
  Add meta tags for Facebook/Twitter (must be specified all or none):
  --url URL             URL of gallery
  --title "TITLE"       title for Facebook and Twitter previews
  --description "DESC"  description for Facebook and Twitter previews
};
  exit $_[0];
}


# main program
@ARGV = map { decode($_) } @ARGV;
my ($rc, @ARGS) = GetOptions(
  'help|h' => sub { print_help(0); },
  'version' => sub { print "$0 $VERSION\n"; exit 0; },
  'c=s' => sub { @captions = @{ parse_captions($_[0], $_[1]) || [] }; },
  'd' => sub { $nodown = 1; },
  'f' => sub { $facedet = 1; },
  'i' => sub { $include = 1; },
  'j=i' => sub { $workers = parse_int($_[0], $_[1], 1, undef); },
  'o' => sub { $orient = 0; },
  'k' => sub { $use_orig = 1; },
  'n=s' => \$name,
  'p' => sub { $fullpano = 0; },
  'r' => sub { $revsort = 1; },
  's' => sub { $slim = 1; },
  't' => sub { $timesort = 0; },
  'u' => sub { $updating = 1; },
  'v' => sub { $verbose++; },
  'noblur' => sub { $do_blur = 0; },
  'max-full=s' => sub { @maxfull = parse_wh(@_); },
  'max-thumb=s' => sub { @maxthumb = parse_wh(@_); },
  'min-thumb=s' => sub { @minthumb = parse_wh(@_); },
  'no-sRGB' => sub { $sRGB = 0; },
  'quality=i' => sub { $imgq = parse_int($_[0], $_[1], 0, 100); },
  'index=s' => \$indexUrl,
  'title=s' => \$galleryTitle,
  'description=s' => \$galleryDescription,
  'url=s' => \$galleryUrl,
  'link-orig:s' => sub { $copy_method = parse_copy_method($_[0], $_[1]); },
  'viewdir:s' => \$viewdir,
);

print_help(2) unless $rc && ( (@ARGV == 2) || ((@ARGV == 1) && $updating) );

if (($galleryTitle || $galleryDescription || $galleryUrl)
    && !($galleryTitle && $galleryDescription && $galleryUrl)) {
  fatal "All three are required: --title, --description, and --url";
}

# only -u may operate on the "input directory" (i.e., for image removals)
($dir, $out) = @ARGV;
$absDir = canonpath(rel2abs($dir)) . '/';
$absOut = canonpath(rel2abs($out)) . '/' if $out;
if ($absOut) {
  if (!-d $absDir) {
    fatal "input directory '$absDir' does not exist";
  } elsif ($absDir eq $absOut) {
    fatal "input and output directory are the same" unless $updating;
  } elsif (substr($absOut, 0, length($absDir)) eq $absDir) {
    fatal "output directory cannot be a sub-directory of input directory";
  } elsif (!-d $absOut) {
    make_path($absOut) || fatal "Failed to create output directory $absOut";
  } elsif (!is_a_gallery($absOut)) {
    fatal "output dir '$absOut' exists, but doesn't look like a ${me} dir";
  }
} else {
  fatal "Use -u option if you want to update image removals"
    unless $updating;
  fatal "input directory '$absDir' does not exist"
    unless -d $absDir;
  $absOut = $absDir;
}

# check for required commands
for (qw(cp ln mv touch)) {
    fatal "Command '$_' missing" unless cmd_exists($_);
}
fatal 'Missing convert executable (from ImageMagick)'
  unless cmd_exists('convert');
unless(cmd_exists('7za')) {
  $p7zip = 0;
  cmd_exists('zip') || fatal 'Missing 7z or zip command';
}
$jpegoptim = 0 unless cmd_exists('jpegoptim');
$pngoptim = 0 unless cmd_exists('pngcrush');
fatal "Missing facedetect (see $facedetect_url)"
  if $facedet && !cmd_exists('facedetect');
fatal 'Missing tificc executable (from lcms2 library)'
  if $sRGB && !cmd_exists('tificc');
my $tificccmd = 'tificc';
my $exiftrancmd;
while($orient)
{
  $exiftrancmd = "exiftran -aip" if cmd_exists('exiftran');
  last if $exiftrancmd;
  $exiftrancmd = "exifautotran" if cmd_exists('exifautotran');
  fatal 'Missing exiftran or exifautotran executable for JPEG autorotation'
    unless $exiftrancmd;
}

# get a list of available files with desired extensions
my @files;
find(
  {
    no_chdir => 1,
    wanted => sub {
      my $file = decode($_);
      return unless -f $file;
      my ($base, undef, $suffix) = fileparse($file, qr/\.[^.]*$/);
      return if (length($suffix) < 2 || $base =~ /^\./);
      $suffix = lc(substr($suffix, 1));
      push(@files, $file) if exists $extensions{$suffix};
    }
  }, encode($absDir)
) unless $absOut eq $absDir;
@files = sort @files;
fatal "No image files found in '$absDir'" unless @files || $updating;

# derived arguments
my $backblur = int(($minthumb[0] + $minthumb[1]) / 2 * 0.1);
my @backsize = (int($minthumb[0] * 4), int($minthumb[1] * 3));

# updating needs to use dome data from the original JSON file
my $json_file = catfile($absOut, 'data.json');
if (-f $json_file) {
  unless ($updating) {
    warn "Found $json_file; updating ...\n";
    $updating++;
  }
  $odata = read_json($json_file);
  warn Data::Dumper->Dump([$odata], ['old_json_data']), "\n"
    if $verbose > 2;
  for (@{$odata->{data}}) {
    next unless exists $_->{$alg};
    next unless exists $_->{img};
    $ofiles->{$_->{$alg}} = $_->{img}->[0];
    warn "SHA $_->{img}->[0]: $_->{$alg}\n" if $verbose > 1;
  }
  my @newfiles = ();
  for (@files) {
    fatal("Can't read file '$_'") unless -r $_;
    $sha->addfile($_);
    my $d = $sha->hexdigest();
    $sha->reset();
    warn "SHA $_: $d\n" if $verbose > 1;
    push @newfiles, $_ unless $ofiles->{$d};
  }
  if (@newfiles) {
    printf "Updating: %d of total %d found image files are new\n",
      scalar @newfiles, scalar @files;
  } else {
    printf "Updating: None of the %d found image files are new\n",
      scalar @files if @files;
  }
  @files = @newfiles;
  $name = $odata->{name} if $odata->{name} && !$name;
} else {
  # cleanup target paths
  fatal "No $json_file file found, cannot update" if $updating;
  for ( qw(thumbs blurs imgs files) ) {
    remove_tree(catfile($absOut, $_));
    make_path(catfile($absOut, $_));
  }
}

# disable sub-process parallelism when threading ourselves
$workers = @files if $workers > @files;
if ($workers) {
  $ENV{MAGICK_THREAD_LIMIT} = 1;
  $ENV{OMP_NUM_THREADS} = 1;
}

# 1st pass: extract/prepare input file data
sub analyze_file
{
  my ($file) = @_;
  my ($base, $absDir, $suffix) = fileparse($file, qr/\.[^.]*$/);
  $suffix = lc(substr($suffix, 1));

  progress::status("$base.$suffix");

  my $props = ImageInfo($file, {PrintConv => 0, Sort => 'File'});
  return unless defined $props && exists $props->{FileType}
                               && exists $filetypes{$props->{FileType}};

  # sanitize file name
  my $sane = $base;
  $sane =~ s/[^\w\-]/_/gu;
  my $root = $sane;

  # create a new file, try with names_#.jpg until we find the first one free
  for (my $c = 0;; $c++) {
    my $tmp = catfile(catfile($absOut, 'imgs'), "$root.$ext");
    if ( sysopen(my $fd, $tmp, O_WRONLY|O_CREAT|O_EXCL, $filemode) ) {
      close($fd);
      last;
    }
    $root = sprintf "%s_%d", $sane, $c;
  }

  $props->{file} = $file;
  $props->{root} = $root;
  $props->{suffix} = $suffix;

  # try to get original image size by iterating to the last duplicated tag
  $props->{OrigImageWidth} = $props->{ExifImageWidth} || undef;
  $props->{OrigImageHeight} = $props->{ExifImageHeight} || undef;
  for(my $n = 1; exists $props->{"ExifImageWidth ($n)"}; $n++) {
    $props->{OrigImageWidth} = $props->{"ExifImageWidth ($n)"};
    $props->{OrigImageHeight} = $props->{"ExifImageHeight ($n)"};
  }

  # extract caption
  for my $m (@captions) {
    if ($m eq 'cmt') {
      if ($props->{Comment}) {
        my $cmt = Encode::decode_utf8($props->{Comment});
        $props->{caption} = cap_from_str($cmt);
        last;
      }
    } elsif ($m eq 'txt') {
      my $txt = catfile($absDir, $base . '.txt');
      if (-f $txt) {
        $props->{caption} = cap_from_str(slurp($txt));
        last;
      }
    } elsif ($m eq 'exif') {
      if ($props->{Title} || $props->{Description}) {
        $props->{caption} = cap_from_props($props);
        last;
      }
    } elsif ($m eq 'xmp') {
      my $xmp = ImageInfo("$file.xmp", {PrintConv => 0, Sort => 'File'});
      if (defined($xmp) && ($xmp->{Title} || $xmp->{Description})) {
        $props->{caption} = cap_from_props($xmp);
        last;
      }
    } else {
      fatal "Encountered unknown caption method '$m'";
    }
  }

  return $props;
}

# get image properties of files with image extensions
if (@files) {
  warn sprintf "Found %d prospective image files\n", scalar @files
    if $verbose;
  warn map { "  $_\n" } @files
    if @files && $verbose > 1;
  progress::init('Image file inspection', scalar @files);
  $aprops = run_in_parallel('analyze', \&analyze_file, \@files);
  warn Data::Dumper->Dump([$aprops], ['$aprops']), "\n"
    if $verbose > 2;
  # remove any files that failed analysis
  my @nf = ();
  my @na = ();
  my $n = 0;
  for (@files) {
    if ( defined $aprops->[$n] ) {
      push @nf, $_;
      push @na, $aprops->[$n];
    }
    $n++;
  }
  progress::done(sprintf '- will now process %d image files', scalar @nf);
  @files = @nf;
  $aprops = \@na;
}

if ($updating) {
  warn "No new image files to process\n" unless @files;
  # but maybe some files were removed and data.json needs updating ...
  my %o = map { $_ => 1 } values %$ofiles;
  delete $o{catfile('imgs', $_)} for @{current_imgs(catfile($absOut, 'imgs'))};
  # these files will need to be removed from zipfile further below
  @deleted = map { (File::Spec->splitpath($_))[2] } keys %o;
  if (@deleted) {
    warn sprintf "%d image files were not found in data.json; updating\n",
         scalar @deleted;
    # redefined aref $odata->{data} leaving out the deleted images
    my @ndata = ();
    for ( @{$odata->{data}} ) {
      if ( (exists $_->{img}) && (exists $o{$_->{img}->[0]}) ) {
        warn "Image file $_->{img}->[0] was removed\n" if $verbose;
        next;
      }
      push @ndata, $_;
    }
    $odata->{data} = \@ndata;
  }
} else {
  warn "No image files found for processing\n" unless @files;
}

# gather dates and megapixel sizes of image files
my $amp = 0;
my $ostamp = 0;
for my $props (@$aprops) {
  # file timestamp
  my $idate = $props->{DateTimeOriginal} || $props->{DateTime} || '';
  $idate =~ s/^\s+|\s+$//g;
  my $t = Time::Piece->strptime($idate, "%Y:%m:%d %H:%M:%S");
  if ($t && $t->epoch()) {
    $props->{date} = $t->strftime("%Y-%m-%d %H:%M");
    $props->{stamp} = $ostamp = $t->epoch();
  } else {
    # no date available, cheat by using the previous timestamp
    $props->{stamp} = $ostamp = $ostamp + 1;
  }
  # megapixels and average thereof
  $props->{mp} = ($props->{ImageWidth} * $props->{ImageHeight} / 1e6);
  $amp += $props->{mp};
}
$amp /= @files if @files;

# 2nd pass: produce output files
sub process_img
{
  my %props = %{$_[0]};
  my $root = $props{root};
  my $suffix = $props{suffix};
  my $file = $props{file};

  # derived file names
  my $ffile = catfile('files', "$root.$suffix");
  my $fbase = "$root.$ext";
  my $fimg = catfile('imgs', $fbase);
  my $fthumb = catfile('thumbs', $fbase);
  my $fblur = catfile('blurs', $fbase);

  my $absFout = catfile($absOut, $ffile);
  my $absFtmp = catfile($absOut, "$ffile.tmp");

  progress::status($fbase);

  # copy source image, apply tranforms, set mode and file timestamp
  copy_source_file($file, $absFout);
  unless ($use_orig) {
    if ($orient && $props{FileType} eq "JPEG" && ($props{Orientation} // 0)) {
      sys("$exiftrancmd '$absFout' 2>/dev/null");
      if (($props{Orientation} // 0) > 4) {
        ($props{ImageWidth}, $props{ImageHeight})
          = ($props{ImageHeight}, $props{ImageWidth});
      }
    }
    if ($jpegoptim && $props{FileType} eq "JPEG") {
      sys('jpegoptim', '-q', $absFout);
    } elsif ($pngoptim && $props{FileType} eq "PNG") {
      sys('pngcrush', '-q', $absFout, $absFtmp);
      rename($absFtmp, $absFout);
    }
  }
  chmod($filemode, $absFout);
  sys('touch', '-r', $file, $absFout);

  # intermediate sRGB colorspace conversion
  if ( !$sRGB || !defined($props{ProfileID})
              || ($props{ColorSpace} // 65535) == 1
              || ($props{DeviceModel} // '') eq 'sRGB') {
    $absFtmp = $absFout;
  } else {
    sys('convert', '-quiet', $absFout, '-compress', 'LZW',
                   '-type', 'truecolor', "tiff:$absFtmp");
    sys($tificccmd, '-t0', $absFtmp, "$absFtmp.tmp");
    rename("$absFtmp.tmp", $absFtmp);
  }

  # generate main image
  my @sfile = ($props{ImageWidth}, $props{ImageHeight});
  my @simg = sys('convert', '-quiet', $absFtmp,
                 '-gamma', '0.454545',
                 '-geometry', "$maxfull[0]x$maxfull[1]>",
                 '-print', '%w\n%h',
                 '-gamma', '2.2',
                 '+profile', '!icc,*',
                 '-quality', $imgq, catfile($absOut, $fimg)
             );

  # face/center detection
  my @center = (0.5, 0.5);
  if ($facedet) {
    my @f = sys("facedetect", "--best", "--center", catfile($absOut, $fimg));
    for (@f) {
      if (my @tmp = /(\d+) (\d+) (\d+) (\d+)/) {
	@center = ($tmp[0] / $simg[0], $tmp[1] / $simg[1]);
	last;
      }
    }
  }

  # thumbnail size
  my $thumbrt;
  if ($sfile[0] / $sfile[1] < $minthumb[0] / $minthumb[1]) {
    $thumbrt = $minthumb[0] / $sfile[0];
  } else {
    $thumbrt = $minthumb[1] / $sfile[1];
  }
  my @sthumb = (max(int($sfile[0] * $thumbrt + 0.5), $minthumb[0]),
                max(int($sfile[1] * $thumbrt + 0.5), $minthumb[1]));
  my @mthumb = (min($maxthumb[0], $sthumb[0]),
                min($maxthumb[1], $sthumb[1]));

  # cropping window
  my $dx = $sthumb[0] - $mthumb[0];
  my $cx = pmin($dx, int($center[0] * $sthumb[0] - $sthumb[0] / 2 + $dx / 2));
  my $dy = $sthumb[1] - $mthumb[1];
  my $cy = pmin($dy, int($center[1] * $sthumb[1] - $sthumb[1] / 2 + $dy / 2));

  sys('convert', '-quiet', $absFtmp,
      '-gamma', '0.454545',
      '-resize', "$sthumb[0]x$sthumb[1]!",
      '-gravity', 'NorthWest',
      '-crop', "$mthumb[0]x$mthumb[1]+$cx+$cy",
      '-gamma', '2.2',
      '+profile', '!icc,*',
      '-quality', $imgq, catfile($absOut, $fthumb)
  );

  # blur
  sys('convert', '-quiet', catfile($absOut, $fthumb),
      '-virtual-pixel', 'Mirror',
      '-gaussian-blur', "0x$backblur",
      '-scale', "$backsize[0]x$backsize[1]",
      '-quality', '90', catfile($absOut, $fblur)
   ) if $do_blur;

  my %fdata;
  $fdata{props} = \%props;
  $fdata{img} = [$fimg, [map { int } @simg]];
  $fdata{file} = [$ffile, [map { int } @sfile]];
  $fdata{blur} = $fblur if $do_blur;

  # avoid storing duplicate information
  my @tdata = ($fthumb, [map { int } @mthumb]);
  if ($sthumb[0] != $mthumb[0] || $sthumb[1] != $mthumb[1]) {
    push(@tdata, [map { int } @sthumb], [map { int } $cx, $cy]);
  }
  $fdata{thumb} = \@tdata;

  # truncate some floats
  $center[0] = int($center[0] * 1000);
  $center[1] = int($center[1] * 1000);
  if (abs($center[0] - 500) > 1 || abs($center[0] - 500) > 1) {
    $fdata{center} = \@center;
  }

  # remove temporary files
  unlink($absFtmp) if $absFtmp ne $absFout;

  return \%fdata;
}

# create thumbnails, blurs, and do face detection where required
if (@$aprops) {
  warn map { "  $_\n" } map { $_->{file} } @$aprops
    if $verbose > 1;
  my $msg = sprintf "Processing of %d image files", scalar @$aprops;
  progress::init($msg, scalar(@$aprops));
  $adata = run_in_parallel('process', \&process_img, $aprops);
  progress::done();
  warn Data::Dumper->Dump([$adata], ['$adata']), "\n"
    if $verbose > 2;
}

# create or update the album zip file
$zipfile = catfile($absOut, $fdownload);
if ($nodown || $slim) {
  unlink $zipfile;
} else {
  if (@$adata) {
    my @f = map { catfile($absOut, $_->{file}[0]) } @$adata;
    my $mt = $workers ? "-mmt=$workers" : '';
    # add files in batches in order to not exceed the command line length limit
    my $n = 200;
    for my $i (0 .. @f/$n) {
      my $m = $n;
      $m = @f % $n if $i >= int(@f/$n);
      last unless $m;
      my @g = @f[$i*$n .. $i*$n + $m - 1];
      if ($p7zip) {
	sys('7za', '-tzip', $mt, 'a', '--', $zipfile, @g);
      } else {
	sys('zip', '-q9j', $zipfile, @g);
      }
    }
    warn sprintf "Updated %s with %d image files\n", $zipfile, scalar @f;
  }
}
if (@deleted && -f $zipfile) {
  if ($p7zip) {
    sys('7za', '-tzip', 'd', '--', $zipfile, @deleted);
  } else {
    sys('zip', '-q9j', '-d', $zipfile, @deleted);
  }
  unlink catfile($absOut, 'files', $_) for @deleted;
  warn sprintf "Removed %d image files from %s\n", scalar @deleted, $zipfile;
}

# prepare and write out the new data.json
my %json = (
  data => [],
  thumb => { min => \@minthumb, max => \@maxthumb },
);
$json{blur} = \@backsize if $do_blur;
for my $fdata (@$adata) {
  my %data;
  for ( qw(img thumb blur center) ) {
    $data{$_} = $fdata->{$_} if defined $fdata->{$_};
  }
  for ( qw(date stamp caption) ) {
    $data{$_} = $fdata->{props}{$_} if defined $fdata->{props}{$_};
  }
  my $file = catfile($absOut, $fdata->{file}[0]);
  fatal("No such file '$file'") unless -f $file;
  fatal("Can't read file '$file'") unless -r _;
  $sha->addfile($file);
  my $d = $sha->hexdigest();
  $sha->reset();
  $data{$alg} = $d;
  push(@{$json{data}}, \%data)
    unless (exists $ofiles->{$d}) && ($ofiles->{$d} = $data{stamp});
  # remove superfluous raw files
  my $keep = !$slim && $include;
  unless ($slim || $keep || !$fullpano) {
    my ($x, $y) = @{$fdata->{file}[1]};
    my $mp = ($x * $y / 1e6);
    # see if the source file is just a crop of the original
    my $ox = $fdata->{props}{OrigImageWidth} // 0;
    my $oy = $fdata->{props}{OrigImageHeight} // 0;
    my $omp = ($ox * $oy / 1e6);
    $keep = 1 if ($mp >= $omp) && ($mp > $amp) && (abs($x/$y) >= $panort);
  }
  unless ($keep) {
    unlink($file);
    warn "Deleted superfluous raw file '$file'\n" if $verbose > 1;
  }
}
write_json(catfile($absOut, 'data.json'), \%json, $odata->{data});

# remove the files directory when empty
rmdir(catfile($absOut, 'files'));

# (re-)setup copy/link of view subdirectory
my $vdir = catfile($absOut, 'view');
remove_tree($vdir) if $updating;
unless (-d $vdir) {
  chdir($absOut) || fatal "Failed to 'cd $absOut' for symlink creation";
  if ($copy_method eq 'sym') {
    sys('ln', '-s', $viewdir, '.');
   } else {
    sys('cp', '-LR', $viewdir, '.');
  }
}
# craft the index.html contents from the actual data.json file
my $html = qq{\n    <div id="photos" } .
           qq{itemscope itemtype="http://schema.org/ImageGallery">\n};
$html .= qq{\t<h1 itemprop="name">$galleryTitle</h1>\n}
    if $galleryTitle;
$html .= qq{\t<p itemprop="description">$galleryDescription</p>\n}
    if $galleryDescription;
$html .= qq{\t<div id="wrapper">};
# enumerate the images for noscript
my $id = -1;
$adata = read_json($json_file);
for (@{$adata->{data}}) {
  my $c = (splitpath($_->{img}[0]))[2];
  $c = $_->{caption} if exists $_->{caption};
  my $f = $_->{img}[0];
  my $t = $_->{thumb}[0];
  $id++;
  $html .= qq{\n\t  <a id="$id" href="$f" title="$c">}
         . qq{<img src="$t" alt="$c"/></a>};
}
$html .= qq{\n\t</div>\n};
$html .= qq{    </div>\n};
$html .= qq{    };

# read the template for the index.html file
my $indexhtml = slurp(catfile($absOut, 'view', 'index.html'));
$indexhtml =~ s@<noscript>.*?</noscript>@<noscript>$html</noscript>@s;

# include the optional social media decoration
if ($galleryTitle && $galleryDescription && $galleryUrl) {
  # default to the first image
  my $galleryImage = $adata->{data}->[0]->{img}->[0];
  $html = qq{
    <!-- for Facebook -->
    <meta property="og:title" content="$galleryTitle" />
    <meta property="og:description" content="$galleryDescription" />
    <meta property="og:type" content="article" />
    <meta property="og:image" content="${galleryUrl}$galleryImage" />
    <meta property="og:url" content="$galleryUrl" />
    <!-- for Twitter -->
    <meta name="twitter:card" content="summary" />
    <meta name="twitter:title" content="$galleryTitle" />
    <meta name="twitter:description" content="$galleryDescription" />
    <meta name="twitter:image" content="${galleryUrl}imgs/$galleryImage" />
  };
  $indexhtml =~ s@    <!-- for Facebook -->\n(    .*\n)*@@;
  $indexhtml =~ s@  </head>@$html  </head>@;
}

# unlink any existing index and write out the new index.html file
my $index = catfile($absOut, 'index.html');
unlink($index);
my $fd;
open($fd, ">:encoding($ENCODING)", $index)
  || fatal "cannot write $index: $!";
print $fd $indexhtml;
if (close $fd) {
  warn "Wrote new $index\n";
} else {
  fatal "Failed to write new $index: $!\n";
}

print sprintf "%s version %s %s gallery in %s\n",
      $me, $VERSION, $updating ? 'updated' : 'created', $absOut;

exit 0;
